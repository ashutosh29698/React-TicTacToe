{"version":3,"sources":["components/Icon.js","App.js","serviceWorker.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","circle","setCircle","cross","setCross","useEffect","EmptyArr","itemNumber","forEach","item","index","push","console","log","Math","floor","random","length","checkWinner","winner","empty","Fragment","map","onClick","toast","warning","position","error","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.136d5e15.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaTimes, FaRegCircle} from 'react-icons/fa'\r\nimport {BsDash} from 'react-icons/bs'\r\n\r\n\r\n// This component will only render the icon based on the value passed\r\n// by the parent component\r\nconst Icon = ({name}) => {\r\n    switch (name) {\r\n        case 'cross':\r\n            return <FaTimes className=\"icon\" />\r\n    \r\n        case 'circle':\r\n            return <FaRegCircle className=\"icon\" />\r\n        \r\n        default:\r\n            return <BsDash className=\"icon\" />\r\n    }\r\n};\r\n\r\nexport default Icon;","import React, {useState, useEffect} from 'react';\nimport Icon from './components/Icon';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nconst itemArray = new Array(9).fill('empty');\n\nconst App = () => {\n\n  const [isCross,setIsCross] = useState(null)\n  const [winMessage, setWinMessage] = useState('')\n  const [circle,setCircle] = useState(0)\n  const [cross, setCross] = useState(0)\n\n  \n\n  const ResetGame = () => {    \n    setIsCross(null)\n    setWinMessage('')\n    itemArray.fill('empty',0,9)\n  }\n\n  const changeItem = itemNumber => {\n    if (winMessage) {\n      toast.warning('PLEASE RESET', {\n        position: \"top-right\"\n      })\n      return\n    }\n    if (itemArray[itemNumber] === 'empty' && !isCross) {\n      itemArray[itemNumber] = isCross ? 'cross' : 'circle'; \n      setIsCross(!isCross);\n      checkWinner();\n    } \n    else {\n      toast.error('ALREADY SET', {\n        position: \"top-right\"\n      })\n    }\n    \n  }\n\n  useEffect(() => {\n    const EmptyArr = []\n    let itemNumber=0;\n    if (isCross && !winMessage) {\n      itemArray.forEach((item,index) => {\n        if (item === 'empty') {\n          EmptyArr.push(index);\n        }\n      })\n      console.log(EmptyArr);\n      itemNumber = EmptyArr[Math.floor(Math.random() * (EmptyArr.length - 0))];\n      console.log(itemNumber);\n      itemArray[itemNumber] = isCross ? 'cross' : 'circle'; \n      setIsCross(!isCross);\n      checkWinner();\n    }\n  },[isCross]);\n\n  // writing the wining logic\n  const checkWinner = () => {\n    // tracking winner\n    let winner = 'empty';\n\n    // winning logic row wise\n    if (itemArray[0] !== 'empty' && \n      itemArray[0] === itemArray[1] && itemArray[0] === itemArray[2]) {\n\n        // setWinMessage(`${itemArray[0]} won`)\n        winner = itemArray[0]\n    \n    }\n    else if (itemArray[3] !== 'empty' && \n      itemArray[3] === itemArray[4] && itemArray[3] === itemArray[5]) {\n    \n        // setWinMessage(`${itemArray[3]} won`)\n        winner = itemArray[3]\n    \n    }\n    else if (itemArray[6] !== 'empty' && \n      itemArray[6] === itemArray[7] && itemArray[7] === itemArray[8]) {\n  \n        // setWinMessage(`${itemArray[6]} won`)\n        winner = itemArray[6]\n  \n    }\n\n    // winning logic column wise\n    else if (itemArray[0] !== 'empty' && \n      itemArray[0] === itemArray[3] && itemArray[0] === itemArray[6]) {\n    \n        // setWinMessage(`${itemArray[0]} won`)\n        winner = itemArray[0]\n\n    }\n    else if (itemArray[1] !== 'empty' &&\n      itemArray[1] === itemArray[4] && itemArray[1] === itemArray[7]) {\n        \n        // setWinMessage(`${itemArray[1]} won`)\n        winner = itemArray[1]\n\n    }\n    else if (itemArray[2] !== 'empty' && \n      itemArray[2] === itemArray[5] && itemArray[2] === itemArray[8]) {\n\n        // setWinMessage(`${itemArray[2]} won`)\n        winner = itemArray[2]\n\n    }\n\n    // winning logic diagonally\n    else if (itemArray[0] !== 'empty' && \n      itemArray[0] === itemArray[4] && itemArray[0] === itemArray[8]) {\n\n        // setWinMessage(`${itemArray[0]} won`)\n        winner = itemArray[0]\n\n    }\n    else if (itemArray[2] !== 'empty' && \n      itemArray[2] === itemArray[4] && itemArray[2] === itemArray[6]) {\n\n        // setWinMessage(`${itemArray[2]} won`)\n        winner = itemArray[2]\n\n    } \n\n    // this is done for tracking the number of times circle or cross won\n    if (winner !== 'empty') {\n      winner === 'circle' ? setCircle(circle + 1) : setCross(cross + 1)\n      winner === 'circle' ? setWinMessage(\"YOU WON\") : setWinMessage(\"COMPUTER WON\")\n      return\n    }\n\n    \n    // checking for tie\n    if (winMessage === \"\"){\n      let empty = 0\n      itemArray.forEach(item => {\n        if (item !== 'empty') {\n          empty++;\n        }\n      })\n\n      if (empty === 9) {\n        setWinMessage(\"GAME TIE\");\n      }\n    }\n    \n\n  }\n  \n\n  return (\n    <React.Fragment>\n          \n          <div className=\"App py-5\">       \n            <ToastContainer />     \n            <div className=\"grid-container\">\n              <div className=\"grid-heading\">\n                {winMessage? (\n                  <h1 className=\"text-warning text-center text-uppercase\">\n                    {winMessage}\n                  </h1>\n                ) : (\n                  <h1 className=\"text-light text-center\">\n                    {isCross? <Icon name=\"cross\" className=\"icon\" /> : <Icon name=\"circle\" /> }'s turn\n                  </h1>\n                )}\n                \n              </div>\n              {itemArray.map((item,index) => (\n                <div className=\"grid-items\" onClick={() => changeItem(index)} key={index}>\n                  <Icon name={item} />\n                </div>\n              ))}\n              <div className=\"grid-footer\">\n                <button \n                className=\"btn btn-outline-warning d-block my-5 px-5 py-2 mx-auto\"\n                onClick={ResetGame}\n                >RESET</button>\n              </div>\n            </div>    \n            <div className=\"\">\n              <h3 className=\"text-center text-light\">Results</h3>\n              <h4 className=\"text-danger\">YOU ( <Icon name=\"circle\" className=\"icon\" /> ) have won {circle} times</h4>\n              <h4 className=\"text-warning\">COMPUTER ( <Icon name=\"cross\" className=\"icon\" /> ) have won {cross} times</h4>\n            </div>\n          </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}